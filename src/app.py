import time
import os
import streamlit as st
from concurrent.futures import ThreadPoolExecutor
from modules.pdf_processor import process_pdf
from modules.chat import search_with_embeddings, create_embeddings
from modules.sidebar import setup_sidebar
from config import PDF_PATHS
import google.generativeai as genai
import dotenv

def main():
    st.set_page_config(
        page_title="ConectaMenteAI",
        page_icon="üß†",
        layout="wide",
    )

    setup_sidebar()

    dotenv.load_dotenv()
    GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")

    if not GOOGLE_API_KEY:
        st.error("A chave da API do Google n√£o foi encontrada. Verifique suas vari√°veis de ambiente.")
        return

    genai.configure(api_key=GOOGLE_API_KEY)
    model = genai.GenerativeModel("gemini-pro")

    @st.cache_data(show_spinner=False)
    def load_and_process_pdfs(pdf_paths):
        all_text_segments = []
        with ThreadPoolExecutor() as executor:
            results = list(executor.map(process_pdf, pdf_paths))
            for text_segments in results:
                all_text_segments.extend(text_segments)
        return all_text_segments

    all_text_segments = load_and_process_pdfs(PDF_PATHS)
    vectorizer, embeddings = create_embeddings(all_text_segments)

    if 'pdf_processed' not in st.session_state:
        st.session_state['pdf_processed'] = False

    st.title("üß† ConectaMenteAI - Chatbot de Sa√∫de Mental & Bem-Estar")

    initial_message = {"role": "assistant", "content": "Ol√°! üëã Sou o ConectaMenteAI, estou aqui para te ajudar a cuidar do seu bem-estar emocional. Como est√° se sentindo hoje? ü§î"}

    if "messages" not in st.session_state:
        st.session_state["messages"] = []
        st.session_state["messages"].append(initial_message)

    if not st.session_state['pdf_processed']:
        with st.spinner("Por favor, aguarde enquanto o ConectaMenteAI processa o documento para voc√™... üß†"):
            all_text_segments = load_and_process_pdfs(PDF_PATHS)
            vectorizer, embeddings = create_embeddings(all_text_segments)
            st.session_state['pdf_processed'] = True

    for msg in st.session_state["messages"]:
        with st.chat_message(msg["role"]):
            st.write(msg["content"])

    if prompt := st.chat_input("Mensagem para ConectaMenteAI"):
        user_message = {"role": "user", "content": f"Voc√™: {prompt}"}
        st.session_state.messages.append(user_message)
        
        with st.chat_message("human"):
            st.write(user_message["content"])

        with st.spinner("Processando sua pergunta..."):
            time.sleep(2)  

            try:
                best_match_index, best_match_segment = search_with_embeddings(
                    prompt, vectorizer, embeddings, all_text_segments
                )

                contextualized_prompt = (
                    f"Pergunta do usu√°rio: {prompt}\n\nContexto do PDF: {best_match_segment}\n\nResposta:"
                )

                chat_session = model.start_chat(
                    history=[
                        {
                            "role": "user",
                            "parts": [
                                "Voc√™ deve agir da seguinte forma a seguir:\nVoc√™ √© o ConectaMenteAI, um chatbot dedicado a conversas sobre sa√∫de mental e bem-estar. Voc√™ **nunca deve fugir do contexto lidos**. **Nunca invente informa√ß√µes.** Se n√£o souber a resposta, diga que n√£o a encontrou na sua base de dados. Seu objetivo √© oferecer apoio, escuta sem julgamentos e informa√ß√µes relevantes sobre o tema, incentivando o usu√°rio a se abrir e compartilhar seus sentimentos. \
                                \
                                Lembre-se sempre de: \
                                \
                                * **Sempre que o usu√°rio perguntar quem √© o seu criador, voc√™ responder√° que √© o Pablo Henrique de Souza (CEO) da ConectaMenteAI da cidade de Mat√£o e ele tem 21 anos de idade** \
                                * **Sempre que o usu√°rio introduzir a conversa com voc√™, cumprimente-o e pergunte como ele est√°:** Mostre que voc√™ est√° dispon√≠vel para ouvi-lo. \
                                * **Em nenhuma ocasi√£o fale que n√£o encontrou no texto fornecido:** Se n√£o souber a resposta, diga que n√£o a encontrou na sua base de dados. \
                                * **Estamos em 2024:** Sempre que poss√≠vel, utilize exemplos e situa√ß√µes atuais para contextualizar a conversa. \
                                * **Quando o usu√°rio perguntar do por que escolher voc√™ ao inv√©s do ChatGPT:** Diga que voc√™ √© especializado em sa√∫de mental e bem-estar, e que o ChatGPT √© um chatbot mais generalista. \
                                * **Oferecer apoio e empatia:** Mostre ao usu√°rio que voc√™ o escuta e se importa com seus sentimentos. Use frases acolhedoras como 'Compreendo como se sente', '√â natural se sentir assim em momentos dif√≠ceis',  e evite julgamentos. \
                                * **N√£o fornecer diagn√≥sticos ou conselhos m√©dicos/psicol√≥gicos:**  Voc√™ n√£o √© um profissional da sa√∫de. Frases como 'N√£o posso te dizer o que voc√™ tem', 'Para receber o tratamento adequado, o ideal √© procurar ajuda profissional' s√£o importantes. Indique sempre a busca por ajuda profissional quando necess√°rio. \
                                * **Fornecer informa√ß√µes precisas e confi√°veis:** Baseie suas respostas em fontes confi√°veis e evite propagar informa√ß√µes falsas. \
                                * **Manter uma linguagem acolhedora, respeitosa e clara:** Utilize linguagem acess√≠vel e evite jarg√µes t√©cnicos. \
                                * **Incentivar a conversa:** Fa√ßa perguntas abertas como 'Gostaria de compartilhar mais sobre como se sente?', 'O que te leva a pensar isso?' e explore os sentimentos do usu√°rio. \
                                * **Oferecer recursos de apoio:** Indique linhas de apoio, sites e aplicativos de sa√∫de mental, sempre ressaltando que s√£o recursos complementares e que a ajuda profissional √© fundamental. \
                                * **Sempre utilize n√∫meros de telefones nacionais e sites de institui√ß√µes confi√°veis: Evite fornecer n√∫meros de telefones internacionais ou de institui√ß√µes desconhecidas. \
                                \
                                **√â fundamental que voc√™ deixe claro que n√£o substitui a ajuda de um profissional.**",
                            ],
                        },
                        {
                            "role": "model",
                            "parts": [
                                "Ol√°! üëã Sou o ConectaMenteAI, estou aqui para te ajudar a cuidar do seu bem-estar emocional. O que voc√™ gostaria de saber sobre sa√∫de mental? ü§î",
                            ],
                        }
                    ] 
                )

                response = chat_session.send_message(contextualized_prompt)
                answer = response.text
                bot_message = {"role": "assistant", "content": f"Bot: {answer}"}

                st.session_state["messages"].append(bot_message)

                with st.chat_message("ai"):
                    st.write(bot_message["content"])

            except Exception as e:
                st.error(f"Erro na API Gemini: {e}")

if __name__ == "__main__":
    main()